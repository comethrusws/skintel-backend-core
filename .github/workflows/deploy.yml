name: Deploy to AWS (EC2 via SCP + Docker Compose)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and deploy archive
        run: |
          # Create archive in /tmp, then move it
          tar --exclude-vcs --exclude='*.tar.gz' -czf /tmp/skintel-backend-core.tar.gz .
          mv /tmp/skintel-backend-core.tar.gz .
          
          # Create SSH key file
          echo "${{ secrets.SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          # Upload to server
          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no \
            skintel-backend-core.tar.gz ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/admin/
          
          # Deploy on server
          ssh -i /tmp/ssh_key -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/admin
            rm -rf skintel-backend-core
            mkdir -p skintel-backend-core
            tar -xzf skintel-backend-core.tar.gz -C skintel-backend-core
            rm skintel-backend-core.tar.gz
            cd skintel-backend-core
            
            # Create .env file with properly quoted secrets
            cat > .env << 'ENVEOF'
          NODE_ENV="${{ secrets.NODE_ENV }}"
          PORT="${{ secrets.PORT }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
          AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_REGION="${{ secrets.AWS_REGION }}"
          S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          S3_PUBLIC_BASE_URL="${{ secrets.S3_PUBLIC_BASE_URL }}"
          S3_OBJECT_ACL="${{ secrets.S3_OBJECT_ACL }}"
          ENVEOF
            
            # Stop existing services and start new ones
            sudo docker compose down || true
            # added as temp fix
            sudo docker system prune -f  # Clean up unused images/containers
            sudo docker compose build --no-cache  # Force rebuild without cache
            sudo docker compose up -d --force-recreate
          EOF
          
          # Clean up SSH key
          rm -f /tmp/ssh_key
